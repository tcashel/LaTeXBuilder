on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v2015.10
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

name: Create Release Draft

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build the stack
        run: make up
      - name: Build the PDF
        run: make docker-build
      - name: Saving the Built PDF
        uses: actions/upload-artifact@v2
        with:
          name: MainFile_docker_build.pdf
          path: ./build/main.pdf
          if-no-files-found: error

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{env.RELEASE_VERSION}}
          body_path: ./ReleaseNotes.md
          draft: true
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/main.pdf
          asset_name: MainFile_${{env.RELEASE_VERSION}}.pdf
          asset_content_type: application/pdf